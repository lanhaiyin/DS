#include <iostream>
#include <algorithm>
#include <math.h>
using namespace std;
struct ListNode 
{
	int val;
	ListNode*next;
	ListNode(int _val=0,ListNode* _next=NULL):val(_val),next(_next)
	{}
	

};

void fast(ListNode * qian,ListNode* hou)
{
	//采用分治的思想，找一个基准值，使左边的值都比基准值小，右边的值都比基准值大
	//定义两个指针，一个指针找比基准值小的，另一个的位置标记比基准值大的前一个位置上
	ListNode *i=qian;
	ListNode*j=i->next;
	int temp=i->val;
	while(j!=hou)
	{
		if(j->val<temp)
		{
			i=i->next;
			swap(i->val,j->val);
		}
		j=j->next;
	}
	
	swap(qian->val,i->val);
	if(qian!=i)
	 fast(qian,i);
	if(i->next!=hou)
	  fast(i->next,hou);

}
int main()
{
	ListNode *node1=new ListNode(3);
	ListNode* node2=new ListNode(1);
	ListNode* node3=new ListNode(5);
	ListNode* node4=new ListNode(4);
	ListNode* node5=new ListNode(2);
	ListNode* node6=new ListNode(0);
	
	
	node1->next=node2;
	node2->next=node3;
	
	node3->next=node4;
	
	node4->next=node5;

	node5->next=node6;

	node6->next=NULL;

	ListNode * node=node1;
fast(node1,node6->next);
 //打印

while(node)
{
	cout<<node->val<<endl;
	node=node->next;
}
return 0;
}
